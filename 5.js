console.log("Завдання: 5 ==============================");

// Створюємо функцію task5, яка буде використовувати проміси.
function task5() {
  let counter = 0;// Створюємо змінну counter яка буде лічильником та присвоюємо значення 0
  const intervalPromise = new Promise((resolve, reject) => {
  // Створюємо проміс з іменем intervalPromise.
  const intervalId = setInterval(() => {counter++;
  // Використовуємо функцію setInterval, щоб імітувати асинхронну операцію яка повторюється кожну секунду
  // збільшуючи лічильник на 1
  console.log(`Значення лічильника: ${counter}`);
  // Виводимо в консоль `Значення лічильника: ${counter}`
  if (counter === 5) {
    clearInterval(intervalId);
    resolve(counter);}}, 1000);});
  // Коли лічильник досягає 5, використовуємо clearInterval та викликаємо resolve, який повертає значення лічильника.
  intervalPromise
  .then((value) => {
    console.log(`Лічильник завершено зі значенням: ${value}`);})// Використовуємо .then метод для отримання значення, яке було передане у функцію resolve() в нашому промісі, та виводимо його в консоль.
    .catch((error) => {
      console.error(error);})// Використовуємо .catch метод для обробки випадків, коли проміс переходить в стан "rejected". Та виводимо в консоль помилку.
  // Обробляємо помилку, якщо вона виникне
  .finally(() => {
    console.log("Завершення лічильника");});// Ми використовуємо .finally метод для виконання дій незалежно від того, в якому стані завершився наш проміс, та виводимо повідомлення "Завершення лічильника"
  // Виконуємо код після завершення проміса
}
// Викликаємо функцію task5
task5();
