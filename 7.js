console.log("Завдання: 7 ==============================");

// Створюємо функцію task7, яка використовує setInterval та проміси.
function task7() {
  return new Promise((resolve, reject) => {
    let seconds = 0;
  // Створюємо новий проміс.
  const intervalId = setInterval(() => {
    const now = new Date();
    seconds = now.getSeconds();
  // Використовуємо функцію setInterval, щоб виконати функцію кожну секунду.
  // Отримаємо поточну дату та час
  
  // Отримуємо секунди з поточної дати
  console.log(`Поточні секунди: ${seconds}`);
  // Виводимо в консоль повідомлення `Поточні секунди: ${seconds}`
  if (seconds %3===0 || seconds !== 0) {
    clearInterval(intervalId);
    reject("Поточні секунди кратні 3!");}},1000);
    setTimeout(() => {
      clearInterval(intervalId);
      resolve("Поточні секунди кратні 10!");
    }, 9000);})
    .catch((error) => {
      console.error(`Проміс відхилився з помилкою: ${error}`);})

      
  // Якщо поточні секунди кратні 10, очищуємо інтервал та резолвимо проміс з рядком "Поточні секунди кратні 10!".
// Якщо поточні секунди кратні 3, очищуємо інтервал та відхиляємо проміс з рядком "Поточні секунди кратні 3!".
  // Використовуємо then для обробки зарезолвленого проміса, та виводимо в консоль `Проміс зарезолвився з значенням: ${value}` .
 // Якщо проміс відхилено, обробляємо помилку за допомогою catch, та виводимо в консоль `Проміс відхилився з помилкою: ${error}`.
  // Використовуємо finally для виконання дій після завершення проміса, незалежно від його статусу, та виводимо в консоль "Проміс завершено".
  .finally(() => {
    console.log("Проміс завершено");});  
}

// Викликаємо функцію task7
task7();
